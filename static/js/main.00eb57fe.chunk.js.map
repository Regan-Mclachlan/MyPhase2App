{"version":3,"sources":["logo.svg","LikeButton.js","AnimeCard.js","AnimeTitles2021.js","App.js","reportWebVitals.js","index.js"],"names":["LikeButton","state","liked","toggle","clicked","setState","className","onClick","this","Component","AnimeCard","Anime","useState","anime","setAnime","countDownString","setCountDownString","useEffect","seconds","nextAiringEpisode","timeUntilAiring","days","Math","floor","hrs","mnts","countDownUntilAir","decrementref","setInterval","value","clearInterval","id","title","romaji","src","coverImage","medium","averageScore","style","color","AnimeTitles2021","pageRef","React","createRef","animes","page","fetchData","queryCurrentAnimes","current","options","method","headers","body","JSON","stringify","query","fetch","then","handleResponse","handleData","catch","handleError","response","json","ok","Promise","reject","data","push","Page","media","error","alert","console","pageNext","log","pagePrev","RomajiTitles","map","PreviousProps","PreviousState","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00eb57fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\n\r\n\r\nexport default class LikeButton extends Component{\r\n    state = {liked: false}\r\n    toggle = () => {\r\n        let clicked = this.state.liked;\r\n        clicked = !clicked\r\n        this.setState({liked: clicked})\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='container' onClick={() => this.toggle()}>\r\n                {this.state.liked ===  false ? ('❤') : ('❤️')}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component, useEffect, useRef, useState} from 'react'\r\nimport LikeButton from './LikeButton.js'\r\n\r\nexport default function AnimeCard({Anime}){\r\n    // constructor(props){\r\n    //     super()\r\n    //     this.state={\r\n    //         anime: props.Anime\r\n    //     }\r\n    //     this.ref = React.createRef(0)\r\n    //     this.timeref = React.createRef(\"current time\")\r\n    //     this.intervalref = React.createRef(null)\r\n    //     this.decrementref = React.createRef(null)\r\n    // }\r\n    const [anime, setAnime] = useState(Anime)\r\n    // const [timeUntilAir, setTimeUntilAir] = useState(Anime.nextAiringEpisode.timeUntilAir)\r\n    const [countDownString, setCountDownString] = useState('current time') \r\n    // const ref = useRef(0)\r\n    // const timeref = useRef('current time')\r\n    // const intervalref = useRef(null)\r\n    // const decrementref = useRef(null) \r\n\r\n    useEffect(() => {\r\n\r\n        countDownUntilAir()\r\n    }, [anime.nextAiringEpisode.timeUntilAiring, countDownString])\r\n    useEffect(()=>{\r\n        const decrementref = setInterval(()=>{\r\n            const value = anime.nextAiringEpisode.timeUntilAiring - 1\r\n            setAnime({\r\n                ...anime, \r\n                nextAiringEpisode: {\r\n                    timeUntilAiring: value\r\n                }\r\n            })\r\n        }, 1000)\r\n        return () => clearInterval(decrementref)\r\n    }, )\r\n    // useEffect(()=> {\r\n    //     const intervalref = setInterval(countDownUntilAir,1000)\r\n    //     return clearInterval(intervalref)\r\n    // }, [])\r\n    // componentDidMount(){\r\n    //     this.ref.current = this.state.anime.nextAiringEpisode.timeUntilAiring\r\n    //     // this.decrementTime(this.state.anime.nextAiringEpisode.timeUntilAiring)\r\n    //     this.decrementref.current = setInterval(this.decrementTime,1000)\r\n    //     // this.intervalref.current = setInterval(this.countDownUntilAir,1000)\r\n    // }\r\n    // componentWillUnmount(){\r\n    //     clearInterval(this.intervalref.current)\r\n    // }\r\n    function countDownUntilAir(){\r\n        const scds = anime.nextAiringEpisode.timeUntilAiring\r\n        let seconds = (scds);\r\n        const days = Math.floor(seconds / (3600*24));\r\n        seconds  -= days*3600*24;\r\n        const hrs  = Math.floor(seconds / 3600);\r\n        seconds  -= hrs*3600;\r\n        const mnts = Math.floor(seconds / 60);\r\n        seconds  -= mnts*60;\r\n        setCountDownString(`${days} days,${hrs} Hrs,${mnts} Minutes,${seconds} Seconds`)\r\n    \r\n    }\r\n    function decrementTime(){\r\n        // ref.current = ref.current - 1\r\n        // console.log(ref.current)\r\n        const value = anime.nextAiringEpisode.timeUntilAiring - 1\r\n        setAnime({\r\n            ...anime, \r\n            nextAiringEpisode: {\r\n                timeUntilAiring: value\r\n            }\r\n        })\r\n\r\n    }\r\n        \r\n\r\n        return (\r\n            <div id='gridTitles'>\r\n                {anime.title.romaji}\r\n                <div id='Card'>\r\n                <img className='titleImages' src={anime.coverImage.medium}></img> \r\n                <br></br>\r\n                {anime.averageScore}/100\r\n                <LikeButton/>\r\n                <div id='timers' style={{color: 'white'}}> \r\n                    {countDownString}\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n","import React, {Component, Fragment} from 'react'\r\nimport AnimeCard from './AnimeCard'\r\n\r\n\r\nexport default class AnimeTitles2021 extends Component{\r\n  // constructor(){\r\n  //   super()\r\n  //   this.state = {\r\n  //       animes: [],\r\n  //       page: 1\r\n  //   }\r\n  //   this.pageNext = () =>{\r\n  //     console.log('state', this)\r\n  //         this.setState({\r\n  //             ...this.state, \r\n  //             page: this.state.page + 1\r\n  //         })\r\n  //         this.fetchData.then(data => {\r\n  //           this.setState({animes: data[0]})\r\n  //         })\r\n  //   }\r\n  // }\r\n  pageRef = React.createRef(null)\r\n  state = {\r\n    animes: [],\r\n    page: 1\r\n  }\r\n  componentDidMount(){\r\n    this.pageRef.current = 1\r\n    this.fetchData().then(data => {\r\n      console.log({animes: data[0]})\r\n      this.setState({animes: data[0]})\r\n    });\r\n  }\r\n  componentDidUpdate(PreviousProps, PreviousState){\r\n    console.log('previousstate', PreviousState)\r\n    console.log('currentState', this.state)\r\n  }\r\n  fetchData = () =>{\r\n  const queryCurrentAnimes = `\r\n  query ($id: Int, $page: Int = ${this.pageRef.current}, $perPage: Int) {\r\n    Page (page: $page, perPage: $perPage) {\r\n      pageInfo {\r\n        total\r\n        currentPage\r\n        lastPage\r\n        hasNextPage\r\n        perPage\r\n      }\r\n      media (id: $id, status: RELEASING, type: ANIME, isAdult: false, \r\n        popularity_greater: 8, startDate_greater: 20210000, countryOfOrigin: \"JP\", sort: POPULARITY_DESC) {\r\n        id\r\n        title {\r\n          romaji\r\n          english\r\n        }\r\n        coverImage {\r\n          medium\r\n        }\r\n        episodes\r\n        averageScore\r\n        nextAiringEpisode {\r\n          timeUntilAiring\r\n          }\r\n      }\r\n    }\r\n  }\r\n  \r\n`;\r\n  const url = 'https://graphql.anilist.co',\r\n      options = {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              query: queryCurrentAnimes,\r\n          })\r\n      };\r\n    \r\n      return fetch(url, options).then(this.handleResponse)\r\n                                .then(this.handleData)\r\n                                .catch(this.handleError);\r\n  }\r\n\r\n  handleResponse = (response) => {\r\n    return response.json().then(function (json) {\r\n        return response.ok ? json : Promise.reject(json);\r\n    });\r\n  }\r\n\r\n  handleData = (data) => {\r\n  const anime = []\r\n  anime.push(data.data.Page.media)\r\n    return anime\r\n  }\r\n\r\n  handleError = (error) => {\r\n    alert('Error, check console');\r\n    console.error(error);\r\n  }\r\n  \r\n  pageNext = () => {\r\n        this.setState({\r\n            ...this.state, \r\n            page: this.state.page + 1\r\n        })\r\n        console.log('currentRef', this.pageRef.current)\r\n        this.pageRef.current = this.pageRef.current + 1\r\n        this.fetchData().then(data => {\r\n          this.setState({animes: data[0]})\r\n          console.log(data)\r\n        })\r\n        console.log(this.pageRef.current)\r\n  }\r\n  pagePrev = () => {\r\n    console.log('state prev', this.state.page)\r\n        this.setState({\r\n          ...this.state,\r\n          page: this.state.page - 1\r\n        })\r\n  }\r\n    \r\n  RomajiTitles = () => {\r\n    return this.state.animes.map(anime => <AnimeCard Anime={anime}/>)\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <div className=\"Titles\"> \r\n          {this.RomajiTitles()}\r\n        </div>\r\n        <div>\r\n          <button onClick={this.pagePrev}>Previous Page</button> \r\n          <button onClick={this.pageNext}>Next Page</button>\r\n        </div>\r\n      </>)\r\n    }\r\n  }","import logo from './logo.svg';\nimport './App.css';\nimport AnimeTitles2021 from './AnimeTitles2021'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <AnimeTitles2021/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}